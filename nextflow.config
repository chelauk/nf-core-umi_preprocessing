/*
 * -------------------------------------------------
 *  umi_variant_calling Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  
  input = 'input.tsv'

  // Genome and references options
  genome = 'GRCh38'

  // Main options
  help = false
  target_bed = false // No default TargetBED file for targeted sequencing
  genomes_base = "/data/scratch/DMP/UCEC/EVGENMOD/cjames/reference/Homo_sapiens/GATK/" + params.genome
  aligner = 'bwa-mem'
  markdup_java_options = '"-Xms4000m -Xmx7g"' // Established values for markDuplicates memory consumption, see https://github.com/SciLifeLab/Sarek/pull/689 for details
  no_gatk_spark = null // GATK Spark implementation of their tools in local mode used by default
  save_bam_mapped = null // Mapped BAMs not saved
  read_structure = "+T +M +T"
  min_reads = 2

  // Custom config
  config_profile_contact = false
  config_profile_description = false
  config_profile_url = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"

  // Other options
  outdir = './results'
  publish_dir_mode = 'copy' // Default PublishDirMode (same as other nf-core pipelines)
  sequencing_center = 'TPU' // No sequencing center to be written in BAM header in MapReads process
  multiqc_config = false
  monochrome_logs = false // Monochrome logs disabled
  email = false // No default email
  email_on_fail = false
  plaintext_email = false // Plaintext email disabled
  max_multiqc_email_size = 25.MB
  hostnames = false
  name = false // No default name
  tracedir = "${params.outdir}/pipeline_info"

  // Singularity containers
  pull_docker_container = false // Pull default container by default

  // Base specifications
  // Defaults only, expecting to be overwritten
  cpus = 8
  max_cpus = 6
  max_memory = 32.GB
  max_time = 240.h
  single_cpu_mem = 12.GB
}

// Container slug
// Stable releases should specify release tag (ie: `dsl2`)
// Developmental code should specify dev
// process.container = 'nfcore/sarek:dsl2'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config by default for all pipelines
includeConfig 'conf/modules.config'

// Load genomes.config
  includeConfig 'conf/genomes.config'

profiles {
  conda {
    docker.enabled = false
    singularity.enabled = false
    params.enable_conda = true
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker {
      enabled = true
      fixOwnership = true
    }
    singularity.enabled = false
    params.enable_conda = false
  }
  singularity {
    docker.enabled = false
    singularity.autoMounts = true
    singularity.enabled = true
    params.enable_conda = false
  }
  test                 { includeConfig 'conf/test.config' }
  test_annotation      { includeConfig 'conf/test_annotation.config' }
  test_no_gatk_spark   { includeConfig 'conf/test_no_gatk_spark.config' }
  test_split_fastq     { includeConfig 'conf/test_split_fastq.config' }
  test_targeted        { includeConfig 'conf/test_targeted.config' }
  test_tool            { includeConfig 'conf/test_tool.config' }
  test_trimming        { includeConfig 'conf/test_trimming.config' }
  test_haplotypecaller { includeConfig 'conf/test_germline_variantcalling.config' }
  test_umi_tso         { includeConfig 'conf/test_umi_tso.config' }
  test_umi_qiaseq      { includeConfig 'conf/test_umi_qiaseq.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}

manifest {
  name = 'umi_variant_calling'
  author = 'Chela James'
  homePage = 'https://github.com/chelauk/umi_variant_calling'
  description = 'An open-source analysis pipeline to detect somatic variants from umi sequencing'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.07.1'
  version = '1.0dev'
}

// Return the minimum between requirements and a maximum limit to ensure that resource requirements don't go over
def check_resource(obj) {
    try {
      if (obj.getClass() == nextflow.util.MemoryUnit && obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else if (obj.getClass() == nextflow.util.Duration && obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else if (obj.getClass() == java.lang.Integer)
        return Math.min(obj, params.max_cpus as int)
      else
        return obj
    } catch (all) {
        println "   ### ERROR ###   Max params max_memory:'${params.max_memory}', max_time:'${params.max_time}' or max_cpus:'${params.max_cpus}'  is not valid! Using default value: $obj"
    }
}

